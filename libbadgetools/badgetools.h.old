#include "simpletools.h"
#include <stdint.h>

/* =========================================================================== */
//                        PUBLIC FUNCTIONS/MACROS
/* =========================================================================== */

#define L 'L'
#define R 'R'
#define ON 1
#define OFF 0

// battery monitor(go/no-go)
#define BATT_MON (0)

/*  rgb colors  */
//define OFF (0)
#define BLUE (1)
#define GREEN (2)
#define CYAN (3)
#define RED (4)
#define MAGENTA (5)
#define YELLOW (6)
#define WHITE (7)

#define SCR_BLACK (0)
#ifndef SCR_WHITE
#define SCR_WHITE (1)
#endif
#define SCR_XOR (3)

#define AY 0
#define AX 1
#define AZ 2

#define LARGE 1
#define SMALL 0

// General
int badge_setup( void );

// LED Light Control
void led(int n, int state);
void leds(int bits);
void rgb(int side, int color);  
void rgbs(int colorL, int colorR);

// Touch Button Monitoring
int button( int pad );
int buttons( void );

// Accelerometer
int accel(int axis);
void accels(int *x, int *y, int *z);
int accel_shaken(void);

// Contact Management
int store(char *contact);
int stored(char * s);
void retrieve(char *contact, int recIdx);

int eeprint(const char *fmt, ...);
int eeprinted(const char *fmt, ...);
int eescan(int recIdx, const char *fmt, ...);

int contacts_count();
void contacts_eraseAll();
void contacts_displayAll();
void contacts_setStartAddr(int address);
//void contacts_clear(void);
//void contacts_setEndAddr(int address);

// IR communication
int send(char *s);
int receive(char *s);
int irprint(const char *fmt, ...);
int irscan(const char *fmt, ...);
void ir_send(char *s, int ssize);
int ir_receive(char *s, int ssize);

// Screen display control
int oledprint(const char *fmt, ...);
void text_size(int size);
void cursor(int col, int row);
void string(char *str);

int clear( void );
void invert(int i);
void point( int x, int y, int color);
void line( int x0, int y0, int x1, int y1, int c);
void box( int x0, int y0, int x1, int y1, int c);
void shape(char *img, int bw, int xtl, int ytl, int xpics, int ypics);
void rotate180();

void screen_auto(int state);
int screen_getAuto();

// Intermediate
int screen_scrollRight( int scrollStart, int scrollStop);
int screen_scrollLeft( int scrollStart, int scrollStop);
int screen_scrollRightDiag( int scrollStart, int scrollStop);
int screen_scrollLeftDiag( int scrollStart, int scrollStop);
int screen_scrollStop( void );
int screen_AutoUpdateOn( void );
int screen_AutoUpdateOff( void );
int screen_update( void );
void screen_image(char *imgaddr);
void screen_string8x2(char *str, int32_t len, int32_t row, int32_t col);
void screen_string16x4( char *str, int len, int row, int col);
void screen_char32x16( int ch, int row, int col);
void screen_char7x5( int ch, int row, int col);

// Advanced
int screen_GetDisplayHeight( void );
int screen_GetDisplayWidth( void );
int screen_GetDisplayType( void );
int screen_ssd1306_Command( int thecmd);
int screen_ssd1306_Data( int thedata);
int screen_getBuffer( void );
int screen_getSplash( void );
int screen_SHIFTOUT( int Dpin, int Cpin, int CSpin, int Bits, int Value);
int screen_WRITEBUFF( int Dpin, int Cpin, int CSpin, int Bits, int Addr);
int screen_start( void );
int screen_stop( void );
int screen_init( int ChipSelect, int DataCommand, int TheData, int TheClock, int Reset, int VCC_state, int Type);
void screen_string8x2(char *str, int32_t len, int32_t row, int32_t col);
void screen_string16x4( char *str, int len, int row, int col);
void screen_char32x16( int ch, int row, int col);
void screen_char7x5( int ch, int row, int col);

// Handy tools
int get_bit(int bitNum, int val);
void set_bit(int bitNum, int *val);
void clear_bit(int bitNum, int *val);

// Debugging
void stringView(char *s, int ssize);
void dev_ee_show(int byteCount, int address);
void ee_displayIndex(int start, int end, int increment);


// From badgealpha
int sscan_ct(const char *str, const char *fmt, ...); 
int _doscanf_ct(const char* str, const char *fmt, va_list args); 
//void ir_send(char *s, int ssize);
int ir_receive(char *s, int ssize);
void ir_start(void);
void ir_stop(void);
//int check_inbox(void);
//void clear_inbox(void);
void ee_badgeCheck(void);
int light_start( void );
int touch_start(int count, unsigned char *p_pins, int dms);


/* =========================================================================== */
//                        PRIVATE FUNCTIONS/MACROS
/* =========================================================================== */


// More LED control
// charlieplex control for blue leds
#define BLUE_0 (0)
#define BLUE_1 (1)
#define BLUE_2 (2)
#define BLUE_3 (3)
#define BLUE_4 (4)
#define BLUE_5 (5)

// charlieplex control for rgb leds
#define RGB_B1 (0)
#define RGB_G1 (1)
#define RGB_R1 (2)
#define RGB_B2 (3)
#define RGB_G2 (4)
#define RGB_R2 (5)

/*  fixed io pins  */
// blue led charlieplex pins 
#define BLU_CP2 (8)
#define BLU_CP1 (7)
#define BLU_CP0 (6)
// rgb led charlieplex pins 
#define RGB_CP2 (3)
#define RGB_CP1 (2)
#define RGB_CP0 (1)

typedef struct light {
// cog running led driver
  volatile int	cog;
// active leds (blue in byte0, rgb in byte1)
  volatile int	ledbits;
// ticks in refresh cycle
  volatile int	cycleticks;
} light;

void light_set_rgb1( int bits);
void light_set_rgb2( int bits);
void light_set_rgb( int bits);
void light_set_all( int bits);
void light_clear( void );
void light_stop( void );
void led_on(int32_t n);
void led_off(int32_t n);

int32_t ircom_start(int32_t rxd, int32_t txd, int32_t baud, int32_t freq);
void ircom_stop(void);
int32_t ircom_rx(void);
int32_t ircom_rxcheck(void);
int32_t ircom_rxtime(int32_t ms);
int32_t ircom_rxflush(void);
int32_t ircom_tx(int32_t c);
int32_t ircom_str(char *p_zstr);
int32_t ircom_dec(int32_t value);
int32_t ircom_rjdec(int32_t val, int32_t width, int32_t pchar);
int32_t ircom_hex(int32_t value, int32_t digits);
int32_t ircom_tx_bin(int32_t value, int32_t digits);
int32_t ircom_txflush(void);
  

#ifdef __GNUC__
#define INLINE__ static inline
#define PostEffect__(X, Y) __extension__({ int tmp__ = (X); (X) = (Y); tmp__; })
#else
#define INLINE__ static
static int tmp__;
#define PostEffect__(X, Y) (tmp__ = (X), (X) = (Y), tmp__)
#define waitcnt(n) _waitcnt(n)
#define coginit(id, code, par) _coginit((unsigned)(par)>>2, (unsigned)(code)>>2, id)
#define cognew(code, par) coginit(0x8, (code), (par))
#define cogstop(i) _cogstop(i)
#endif

/*
__asm__ volatile( "    .global __clkfreqval\n" );
__asm__ volatile( "    __clkfreqval = 0x4c4b400\n" );
__asm__ volatile( "    .global __clkmodeval\n" );
__asm__ volatile( "    __clkmodeval = 0x6f\n" );
*/


typedef struct touch {
// # of pins scanned
  volatile int	pincount;
// pointer to list of pins (byte array)
  volatile int	p_pinslist;
// discharge timing
  volatile int	disch;
// mask for input pins
  volatile int	pinsmask;
} touch;


//extern char beanie[LCD_BUFFER_SIZE_BOTH_TYPES];

// touch buttons (left)
#define BTN_0 (27)
//define BTN_0 (17)
#define BTN_1 (26)
//define BTN_1 (16)
#define BTN_2 (25)
//define BTN_2 (15)
// touch buttons (right)
#define BTN_5 (17)
//define BTN_5 (27)
#define BTN_4 (16)
//define BTN_4 (26)
#define BTN_3 (15)
//define BTN_3 (25)
// open source logo button
#define BTN_OS (5)

/*  max supported using IR connection  */
#define IR_BAUD (2400)
/*  matches receiver on DC22 badge  */
#define IR_FREQ (36000)

// IR coms
#define IR_OUT (24)
#define IR_IN (23)

// OLED connections 
#define OLED_DAT (22)
#define OLED_CLK (21)
#define OLED_DC (20)
#define OLED_RST (19)
#define OLED_CS (18)

// composite video (J503)  
#define TV_DAC2 (14)
#define TV_DAC1 (13)
#define TV_DAC0 (12)
// audio (J503)
#define AUD_RT (10)
#define AUD_LF (9)
// blue led charlieplex pins 
#define BLU_CP2 (8)
// define BLU_CP2 (3)
#define BLU_CP1 (7)
// define BLU_CP1 (2)
#define BLU_CP0 (6)
// define BLU_CP0 (1)
// rgb led charlieplex pins 
#define RGB_CP2 (3)
// define RGB_CP2 (8)
#define RGB_CP1 (2)
// define RGB_CP1 (7)
#define RGB_CP0 (1)
// define RGB_CP0 (6)

/*  buttons masks  */
// upper right
#define PB0_MASK (1)
// middle right
#define PB1_MASK (2)
// lower right
#define PB2_MASK (4)
// lower left
#define PB3_MASK (8)
// middle left
#define PB4_MASK (16)
// upper left
#define PB5_MASK (32)
// open source logo
#define PB6_MASK (64)
#define OFF_MASK ((PB5_MASK | PB0_MASK))

#define STX 2                                                        //serial framing bytes
#define ETX 3

#define LCD_BUFFER_SIZE_BOTH_TYPES (1024)
#define SSD1306_SWITCHCAPVCC (2)
#define TYPE_128X32 (32)
#define TYPE_128X64 (64)

#define EE_BADGE_DATA_START 32768
#define EE_BADGE_DATA_END 65536 - 4


void init_MMA7660FC(void);
void ee_init(void);



// accelerometer interrupt in
#define ACC_INT (4)

#define XOUT  0
#define YOUT  1
#define ZOUT  2
#define TILT  3
#define SRST  4
#define SPCNT 5
#define INTSU 6
#define MODE  7
#define SR    8
#define PDET  9
#define PD    10
  
#define MMA7660_I2C 0b1001100     
                                
#define ALERT_BIT  0b01000000      //0x40 
#define ALERT_XYZT 0x40404040     

#define BUF_SIZE (128)
#define BUF_MASK ((BUF_SIZE - 1))
typedef struct jm_ir_hdserial {
// cog flag/id
  volatile int32_t	cog;
// rx head index
  volatile int32_t	rxhead;
// rx tail index
  volatile int32_t	rxtail;
// hub address of rxbuf
  volatile int32_t	rxhub;
// tx head index
  volatile int32_t	txhead;
// tx tail index
  volatile int32_t	txtail;
// hub address of txbuf
  volatile int32_t	txhub;
// rx pin (in)
  volatile int32_t	rxpin;
// tx pin (out)
  volatile int32_t	txpin;
// bit timing (ticks)
  volatile int32_t	bitticks;
// ctrx setup for freq
  volatile int32_t	frsetup;
// rx and tx buffers
  volatile uint8_t	rxbuf[BUF_SIZE];
  volatile uint8_t	txbuf[BUF_SIZE];
} jm_ir_hdserial;



//define TYPE_128X32 (32)
//define TYPE_128X64 (64)
#define SSD1306_LCDWIDTH (128)
#define SSD1306_LCDHEIGHT32 (32)
#define SSD1306_LCDHEIGHT64 (64)
#define SSD1306_LCDCHARMAX (8)
#define SSD1306_SETCONTRAST (129)
#define SSD1306_DISPLAYALLON_RESUME (164)
#define SSD1306_DISPLAYALLON (165)
#define SSD1306_NORMALDISPLAY (166)
#define SSD1306_INVERTDISPLAY (167)
#define SSD1306_DISPLAYOFF (174)
#define SSD1306_DISPLAYON (175)
#define SSD1306_SETDISPLAYOFFSET (211)
#define SSD1306_SETCOMPINS (218)
#define SSD1306_SETVCOMDETECT (219)
#define SSD1306_SETDISPLAYCLOCKDIV (213)
#define SSD1306_SETPRECHARGE (217)
#define SSD1306_SETMULTIPLEX (168)
#define SSD1306_SETLOWCOLUMN (0)
#define SSD1306_SETHIGHCOLUMN (16)
#define SSD1306_SETSTARTLINE (64)
#define SSD1306_MEMORYMODE (32)
#define SSD1306_COMSCANINC (192)
#define SSD1306_COMSCANDEC (200)
#define SSD1306_SEGREMAP (160)
#define SSD1306_CHARGEPUMP (141)
#define SSD1306_EXTERNALVCC (1)


// Scrolling #defines
#define SSD1306_ACTIVATE_SCROLL (47)
#define SSD1306_DEACTIVATE_SCROLL (46)
#define SSD1306_SET_VERT_SCROLL_AREA (163)
#define SSD1306_RIGHT_HORIZ_SCROLL (38)
#define SSD1306_LEFT_HORIZ_SCROLL (39)
#define SSD1306_VERTRIGHTHORIZSCROLL (41)
#define SSD1306_VERTLEFTHORIZSCROLL (42)

#define LCD_BUFFER_SIZE_BOTH_TYPES (1024)
#define SSD1306_SWITCHCAPVCC (2)

#define TYPE_128X32 (32)
#define TYPE_128X64 (64)



typedef volatile struct screen {
  volatile int	cog;
  volatile int	command;
  volatile int	CS;
  volatile int	DC;
  volatile int	DATA;
  volatile int	CLK;
  volatile int	RST;
  volatile int	vccstate;
  volatile int	displayWidth;
  volatile int	displayHeight;
  volatile int	displayType;
  volatile int	AutoUpdate;
  volatile uint8_t	buffer[LCD_BUFFER_SIZE_BOTH_TYPES];
  volatile int charSize;
  volatile int crsrX;
  volatile int	crsrY;
} screen;


extern uint8_t oleddat[];

int screen_HIGH( int Pin);
int screen_LOW( int Pin);
int32_t screen_swap( int32_t a, int32_t b);



#ifdef __GNUC__
#define INLINE__ static inline
#define Yield__() __asm__ volatile( "" ::: "memory" )
//define PostEffect__(X, Y) __extension__({ int32_t tmp__ = (X); (X) = (Y); tmp__; })
#else
#define INLINE__ static
static int32_t tmp__;
#define PostEffect__(X, Y) (tmp__ = (X), (X) = (Y), tmp__)
#define Yield__()
#define waitcnt(n) _waitcnt(n)
#define coginit(id, code, par) _coginit((unsigned)(par)>>2, (unsigned)(code)>>2, id)
#define cognew(code, par) coginit(0x8, (code), (par))
#define cogstop(i) _cogstop(i)
#endif

INLINE__ int32_t Min__(int32_t a, int32_t b) { return a < b ? a : b; }
INLINE__ int32_t Max__(int32_t a, int32_t b) { return a > b ? a : b; }
INLINE__ int32_t Shr__(uint32_t a, uint32_t b) { return (a>>b); }
INLINE__ int32_t Rotl__(uint32_t a, uint32_t b) { return (a<<b) | (a>>(32-b)); }
INLINE__ int32_t Rotr__(uint32_t a, uint32_t b) { return (a>>b) | (a<<(32-b)); }
INLINE__ int32_t Lookup__(int32_t x, int32_t b, int32_t a[], int32_t n) { int32_t i = (x)-(b); return ((unsigned)i >= n) ? 0 : (a)[i]; }

/*
  TERMS OF USE: MIT License
 
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  and/or sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
 
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
 
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.
*/


